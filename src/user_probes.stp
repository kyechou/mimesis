#!/usr/bin/env stap
#
# https://s2e.systems/docs/Tutorials/SystemTap/index.html
# https://sourceware.org/systemtap/documentation.html
#

%{
struct DemoHeader {
    uint16_t seed; // egress port
    uint16_t len;  // payload length
};
%}

#
# S2E functions.
# We use the embedded C support of SystemTap to access the S2E custom
# instructions. A comprehensive set of such instructions can be found in
# src/s2e/guest/common/include/s2e/s2e.h.
#

/**
 * Print a message to the S2E log.
 */
private function s2e_message(message:string) %{ /* unprivileged */
    __asm__ __volatile__(
            ".byte 0x0f, 0x3f\n"
            ".byte 0x00, 0x10, 0x00, 0x00\n"
            ".byte 0x00, 0x00, 0x00, 0x00\n"
            : : "a" (STAP_ARG_message));
%}

/**
 * Set `intf` and `buffer` to be symbolic.
 *
 * References:
 *   src/s2e/guest/common/include/s2e/s2e.h
 *   src/s2e/guest/common/include/s2e/opcodes.h
 */
private function s2e_mimesis_user_recv(intf:long, buffer:long, len:long) %{
    __asm__ __volatile__(
        ".byte 0x0F, 0x3F\n"
        ".byte 0x00, 0x99, 0x00, 0x00\n"
        ".byte 0x00, 0x00, 0x00, 0x00\n"
        : : "a" (STAP_ARG_intf), "c" (STAP_ARG_buffer), "d" (STAP_ARG_len) : "memory"
    );
%}

/**
 * Record the egress packet traces and terminate the execution path.
 *
 * References:
 *   src/s2e/guest/common/include/s2e/s2e.h
 *   src/s2e/guest/common/include/s2e/opcodes.h
 */
private function s2e_mimesis_user_send(intf:long, buffer:long, len:long) %{
    __asm__ __volatile__(
        ".byte 0x0F, 0x3F\n"
        ".byte 0x00, 0x99, 0x01, 0x00\n"
        ".byte 0x00, 0x00, 0x00, 0x00\n"
        : : "a" (STAP_ARG_intf), "c" (STAP_ARG_buffer), "d" (STAP_ARG_len) : "memory"
    );
%}

#
# Helper functions.
#

/**
 * Print the given message to both the standard output and S2E log.
 */
private function info(message:string) {
    printf("%s: [%s] %s\n", probefunc(), execname(), message);
    msg = sprintf("%s: [%s] %s\n", probefunc(), execname(), message);
    s2e_message(msg);
}

#
# Ingress probes.
#

/**
 * void user_recv(uint32_t *intf, void *buffer, uint32_t len);
 */
probe process("user-demo-stateless").function("user_recv").return {
    s2e_mimesis_user_recv(@entry($intf), @entry($buffer), @entry($len));
}
# probe process("user-demo-stateful").function("user_recv").return {
#     s2e_mimesis_user_recv(@entry($intf), @entry($buffer), @entry($len));
# }
# probe process("user-l2-echo").function("user_recv").return {
#     s2e_mimesis_user_recv(@entry($intf), @entry($buffer), @entry($len));
# }
# probe process("user-l2-forward").function("user_recv").return {
#     s2e_mimesis_user_recv(@entry($intf), @entry($buffer), @entry($len));
# }
# probe process("user-ip-echo").function("user_recv").return {
#     s2e_mimesis_user_recv(@entry($intf), @entry($buffer), @entry($len));
# }
# probe process("user-ip-stateless").function("user_recv").return {
#     s2e_mimesis_user_recv(@entry($intf), @entry($buffer), @entry($len));
# }

#
# Egress probes.
#

/**
 * void user_send(uint32_t intf, void *buffer, uint32_t len);
 */
probe process("user-demo-stateless").function("user_send") {
    s2e_mimesis_user_send($intf, $buffer, $len);
}
# probe process("user-demo-stateful").function("user_send") {
#     s2e_mimesis_user_send($intf, $buffer, $len);
# }
# probe process("user-l2-echo").function("user_send") {
#     s2e_mimesis_user_send($intf, $buffer, $len);
# }
# probe process("user-l2-forward").function("user_send") {
#     s2e_mimesis_user_send($intf, $buffer, $len);
# }
# probe process("user-ip-echo").function("user_send") {
#     s2e_mimesis_user_send($intf, $buffer, $len);
# }
# probe process("user-ip-stateless").function("user_send") {
#     s2e_mimesis_user_send($intf, $buffer, $len);
# }

# vim: ts=4 sw=4 et cms=#%s :
